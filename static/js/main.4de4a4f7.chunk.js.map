{"version":3,"sources":["redux/contants.js","components/AddTodo.js","redux/actions/todoActions.js","components/TodoList.js","components/Footer.js","components/Todo.js","App.js","reportWebVitals.js","redux/reducers/todoReducer.js","redux/reducers/index.js","redux/reducers/filterReducer.js","redux/configureStore.js","index.js"],"names":["ADD_TODO","TOGGLE_TODO","DELETE_TODO","DELETE_ALL_COMPLETED","SET_FILTER","FILTERS","useStyles","makeStyles","root","width","borderColor","color","connect","dispatch","addTodo","todo","type","constants","todoActions","props","useState","name","setName","classes","TextField","id","label","variant","value","onChange","event","target","onKeyDown","e","keyCode","backgroundColor","borderBottom","completed","textDecoration","pending","state","items","filter","toggleTodo","deleteTodo","length","List","className","map","labelId","ListItem","dense","button","onClick","ListItemIcon","Checkbox","edge","checked","tabIndex","ListItemText","primary","text","ListItemSecondaryAction","IconButton","aria-label","deleteAllCompleted","filterTodos","todosLeft","condition","ButtonGroup","size","Button","style","textTransform","Todo","App","backgroundImage","process","backgroundRepeat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","newId","rootReducer","combineReducers","action","todoToAdd","createStore","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"8TAAaA,EAAW,WACXC,EAAc,cACdC,EAAc,cACdC,EAAuB,uBACvBC,EAAa,aAEbC,EACJ,MADIA,EAED,SAFCA,EAGE,YCFf,IAAMC,EAAYC,YAAW,CACzBC,KAAM,CACFC,MAAO,OACP,4DAA6D,CACzDC,YAAa,SAEjB,4BAA6B,CACzBC,MAAO,SAEX,4BAA6B,CACzBA,MAAO,YAyCJC,kBAAQ,MANvB,SAA4BC,GACxB,MAAO,CACHC,QAAS,SAAAC,GAAI,OAAIF,ECpDlB,SAAiBE,GACpB,MAAO,CAAEC,KAAMC,EAAoBF,QDmDLG,CAAoBH,QAIvCH,EApCf,SAAiBO,GAAQ,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,KAEdC,EAAUjB,IAYhB,OACI,8BACI,cAACkB,EAAA,EAAD,CACIC,GAAG,iBACHC,MAAM,WACNC,QAAQ,WACRC,MAAOP,EACPQ,SAjBS,SAACC,GAClBR,EAAQQ,EAAMC,OAAOH,QAiBbI,UAdS,SAACC,GACA,KAAdA,EAAEC,SAAkBD,EAAEF,OAAOH,QAC7BT,EAAML,QAAQmB,EAAEF,OAAOH,OACvBN,EAAQ,MAYJC,QAAS,CACLf,KAAMe,EAAQf,a,gFEjC5BF,EAAYC,aAAW,iBAAO,CAChCC,KAAM,CACFC,MAAO,OACP0B,gBAAiB,UACjB,kGAAmG,CAC/FC,aAAc,qBAElB,sBAAuB,CACnBzB,MAAO,WAEX,kCAAmC,CAC/BA,MAAO,UAGf0B,UAAW,CACPC,eAAgB,eAChB3B,MAAO,WAEX4B,QAAS,CACL5B,MAAO,aA4DAC,mBApBf,SAAyB4B,GAUrB,MAAO,CAAEC,MATKD,EAAMC,MAAMC,QAAO,SAAA3B,GAC7B,OAAIyB,EAAME,SAAWrC,GACTU,EAAKsB,UACNG,EAAME,SAAWrC,EACjBU,EAAKsB,UAELtB,SAMnB,SAA4BF,GACxB,MAAO,CACH8B,WAAY,SAAAlB,GAAE,OAAIZ,EDjFnB,SAAoBY,GACvB,MAAO,CAAET,KAAMC,EAAuBQ,MCgFPP,CAAuBO,KAClDmB,WAAY,SAAAnB,GAAE,OAAIZ,ED9EnB,SAAoBY,GACvB,MAAO,CAAET,KAAMC,EAAuBQ,MC6EPP,CAAuBO,QAI3Cb,EAxDf,SAAkBO,GACd,IAAMI,EAAUjB,IAEhB,OACI,8BACKa,EAAMsB,OAAStB,EAAMsB,MAAMI,OAC5B,cAACC,EAAA,EAAD,CAAMC,UAAWxB,EAAQf,KAAzB,SACKW,EAAMsB,MAAMO,KAAI,SAACjC,GACd,IAAMkC,EAAO,8BAA0BlC,EAAKU,IACtCd,EAAQI,EAAKsB,UAAYd,EAAQc,UAAYd,EAAQgB,QAE3D,OACI,eAACW,EAAA,EAAD,CAAwBC,OAAK,EAACC,QAAM,EAACC,QAAS,kBAAMlC,EAAMwB,WAAW5B,EAAKU,KAA1E,UACI,cAAC6B,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,QAAS1C,EAAKsB,UACdqB,UAAW,MAGnB,cAACC,EAAA,EAAD,CAAclC,GAAIwB,EAASW,QAAS7C,EAAK8C,KAAMd,UAAWpC,IAC1D,cAACmD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYP,KAAK,MAAMQ,aAAW,QAAQX,QAAS,kBAAMlC,EAAMyB,WAAW7B,EAAKU,KAA/E,SACI,cAAC,IAAD,UAXGV,EAAKU,SAkB9B,qB,yBCLCb,mBAdf,SAAyB4B,GACrB,MAAO,CACHC,MAAOD,EAAMC,MACbC,OAAQF,EAAME,WAItB,SAA4B7B,GACxB,MAAO,CACHoD,mBAAoB,kBAAMpD,EFzCvB,CAAEG,KAAMC,KE0CXiD,YAAa,SAAAxB,GAAM,OAAI7B,EFvCxB,SAAmB6B,GACtB,MAAO,CAAE1B,KAAMC,EAAsByB,UEsCDxB,CAAsBwB,QAI/C9B,EAtDf,SAAgBO,GACZ,IAAMgD,EAAYhD,EAAMsB,MAAMC,QAAO,SAAA3B,GAAI,OAAKA,EAAKsB,aAE7C6B,EAAc,SAACE,GAAD,OAAe,WAC/BjD,EAAM+C,YAAYE,KAGtB,OACI,gCACI,sBAAKrB,UAAU,SAAf,UACI,gCAAMoB,EAAUtB,OAAhB,mBACA,8BACI,eAACwB,EAAA,EAAD,CAAa1C,QAAQ,OAAO2C,KAAK,QAAQ3D,MAAM,UAA/C,UACI,cAAC4D,EAAA,EAAD,CAAQxB,UAAU,OAAOpC,MAAOQ,EAAMuB,SAAWrC,EAAc,UAAY,UAAWmE,MAAO,CAAEC,cAAe,QAAUpB,QAASa,EAAY7D,GAA7I,iBACA,cAACkE,EAAA,EAAD,CAAQxB,UAAU,OAAOpC,MAAOQ,EAAMuB,SAAWrC,EAAiB,UAAY,UAAWmE,MAAO,CAAEC,cAAe,QAAUpB,QAASa,EAAY7D,GAAhJ,oBACA,cAACkE,EAAA,EAAD,CAAQxB,UAAU,OAAOpC,MAAOQ,EAAMuB,SAAWrC,EAAoB,UAAY,UAAWmE,MAAO,CAAEC,cAAe,QAAUpB,QAASa,EAAY7D,GAAnJ,4BAGR,cAACkE,EAAA,EAAD,CAAQ5D,MAAM,UAAUoC,UAAU,OAAOyB,MAAO,CAAEC,cAAe,QAAUpB,QAAS,kBAAMlC,EAAM8C,sBAAhG,gCAGJ,sBAAKlB,UAAU,eAAf,UACI,sBAAKA,UAAU,YAAf,UACI,gCAAMoB,EAAUtB,OAAhB,mBACA,cAAC0B,EAAA,EAAD,CAAQ5D,MAAM,UAAUoC,UAAU,OAAOyB,MAAO,CAAEC,cAAe,QAAUpB,QAAS,kBAAMlC,EAAM8C,sBAAhG,gCAEJ,qBAAKlB,UAAU,SAAf,SACI,eAACsB,EAAA,EAAD,CAAa1C,QAAQ,OAAO2C,KAAK,QAAQ3D,MAAM,UAA/C,UACI,cAAC4D,EAAA,EAAD,CAAQxB,UAAU,OAAOpC,MAAOQ,EAAMuB,SAAWrC,EAAc,UAAY,UAAWmE,MAAO,CAAEC,cAAe,QAAUpB,QAASa,EAAY7D,GAA7I,iBACA,cAACkE,EAAA,EAAD,CAAQxB,UAAU,OAAOpC,MAAOQ,EAAMuB,SAAWrC,EAAiB,UAAY,UAAWmE,MAAO,CAAEC,cAAe,QAAUpB,QAASa,EAAY7D,GAAhJ,oBACA,cAACkE,EAAA,EAAD,CAAQxB,UAAU,OAAOpC,MAAOQ,EAAMuB,SAAWrC,EAAoB,UAAY,UAAWmE,MAAO,CAAEC,cAAe,QAAUpB,QAASa,EAAY7D,GAAnJ,qCCrBTqE,MAXf,WACI,OACI,sBAAK3B,UAAU,YAAf,UACI,oBAAIA,UAAU,SAAd,kBACA,qBAAKA,UAAU,WAAf,SAA0B,cAAC,EAAD,MAC1B,qBAAKA,UAAU,OAAf,SAAuB,cAAC,EAAD,MACvB,cAAC,EAAD,Q,MCAG4B,MARf,WACE,OACE,qBAAK5B,UAAU,MAAMyB,MAAO,CAAEI,gBAAgB,OAAD,OAASC,YAAT,gCAA+DC,iBAAkB,aAA9H,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCLVQ,EAAQ,ECEZ,IAKeC,EALKC,YAAgB,CACjCjD,MDFY,WAA0C,IAArBD,EAAoB,uDAAZ,GAAImD,EAAQ,uCACpD,OAAQA,EAAO3E,MACX,KAAKC,EACD,IAAM2E,EAAY,CACdnE,GAAI+D,IACJ3B,KAAM8B,EAAO5E,KACbsB,WAAW,GAEf,MAAM,GAAN,mBAAWG,GAAX,CAAkBoD,IACtB,KAAK3E,EACD,OAAOuB,EAAMQ,KAAI,SAAAjC,GACb,OAAIA,EAAKU,KAAOkE,EAAOlE,GACZV,EAEJ,2BACAA,GADP,IAEIsB,WAAYtB,EAAKsB,eAG7B,KAAKpB,EACD,OAAOuB,EAAME,QAAO,SAAA3B,GAAI,OAAIA,EAAKU,KAAOkE,EAAOlE,MACnD,KAAKR,EACD,OAAOuB,EAAME,QAAO,SAAA3B,GAAI,OAAKA,EAAKsB,aACtC,QACI,OAAOG,ICrBhBE,OCJY,WAA+D,IAAxCF,EAAuC,uDAA/BvB,EAAuB0E,EAAQ,uCACzE,OAAQA,EAAO3E,MACX,KAAKC,EACD,OAAO0E,EAAOjD,OAClB,QACI,OAAOF,MCJJqD,cAAYJ,GCK3BK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.4de4a4f7.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const DELETE_ALL_COMPLETED = \"DELETE_ALL_COMPLETED\";\nexport const SET_FILTER = \"SET_FILTER\";\n\nexport const FILTERS = {\n    ALL: \"All\",\n    ACTIVE: \"Active\",\n    COMPLETED: \"Completed\"\n};","import './AddTodo.css';\nimport { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport * as todoActions from '../redux/actions/todoActions';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"white\"\n        },\n        \"& .MuiInputLabel-outlined\": {\n            color: \"white\"\n        },\n        \"& .MuiOutlinedInput-input\": {\n            color: \"white\"\n        }\n    }\n});\n\nfunction AddTodo(props) {\n    const [name, setName] = useState('');\n    const classes = useStyles();\n\n    const handleChange = (event) => {\n        setName(event.target.value);\n    };\n\n    const handlesubmit = (e) => {\n        if (e.keyCode === 13 && e.target.value) {\n            props.addTodo(e.target.value);\n            setName('');\n        }\n    }\n    return (\n        <div>\n            <TextField\n                id=\"outlined-basic\"\n                label=\"New Item\"\n                variant=\"outlined\"\n                value={name}\n                onChange={handleChange}\n                onKeyDown={handlesubmit}\n                classes={{\n                    root: classes.root\n                }} />\n        </div>\n    );\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addTodo: todo => dispatch(todoActions.addTodo(todo))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(AddTodo);","import * as constants from '../contants';\n\nexport function addTodo(todo) {\n    return { type: constants.ADD_TODO, todo };\n}\n\nexport function toggleTodo(id) {\n    return { type: constants.TOGGLE_TODO, id };\n}\n\nexport function deleteTodo(id) {\n    return { type: constants.DELETE_TODO, id };\n}\n\nexport function deleteAllCompleted() {\n    return { type: constants.DELETE_ALL_COMPLETED };\n}\n\nexport function setFilter(filter) {\n    return { type: constants.SET_FILTER, filter };\n}","import { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { connect } from 'react-redux';\nimport * as todoActions from '../redux/actions/todoActions';\nimport { FILTERS } from '../redux/contants';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%',\n        backgroundColor: '#777a92',\n        \"& .MuiButtonBase-root.MuiListItem-root.MuiListItem-dense.MuiListItem-gutters.MuiListItem-button\": {\n            borderBottom: '1px solid #25273c'\n        },\n        \"& .MuiCheckbox-root\": {\n            color: '#25273c'\n        },\n        \"& .MuiCheckbox-root.Mui-checked\": {\n            color: 'white'\n        }\n    },\n    completed: {\n        textDecoration: 'line-through',\n        color: '#25273c'\n    },\n    pending: {\n        color: 'white'\n    }\n}));\n\nfunction TodoList(props) {\n    const classes = useStyles();\n\n    return (\n        <div>\n            {props.items && props.items.length ? \n            <List className={classes.root}>\n                {props.items.map((todo) => {\n                    const labelId = `checkbox-list-label-${todo.id}`;\n                    const color = todo.completed ? classes.completed : classes.pending;\n\n                    return (\n                        <ListItem key={todo.id} dense button onClick={() => props.toggleTodo(todo.id)}>\n                            <ListItemIcon>\n                                <Checkbox\n                                    edge=\"start\"\n                                    checked={todo.completed}\n                                    tabIndex={-1}\n                                />\n                            </ListItemIcon>\n                            <ListItemText id={labelId} primary={todo.text} className={color} />\n                            <ListItemSecondaryAction>\n                                <IconButton edge=\"end\" aria-label=\"clear\" onClick={() => props.deleteTodo(todo.id)}>\n                                    <ClearIcon />\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n            </List>\n            : 'No items left'}\n        </div>\n\n    )\n}\n\nfunction mapStateToProps(state) {\n    const items = state.items.filter(todo => {\n        if (state.filter === FILTERS.ACTIVE) {\n            return !todo.completed;\n        } else if (state.filter === FILTERS.COMPLETED) {\n            return todo.completed;\n        } else {\n            return todo;\n        }\n    });\n    return { items }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleTodo: id => dispatch(todoActions.toggleTodo(id)),\n        deleteTodo: id => dispatch(todoActions.deleteTodo(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","import './Footer.css';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport * as todoActions from '../redux/actions/todoActions';\nimport { FILTERS } from '../redux/contants';\nimport { connect } from 'react-redux';\n\nfunction Footer(props) {\n    const todosLeft = props.items.filter(todo => !todo.completed);\n\n    const filterTodos = (condition) => () => {\n        props.filterTodos(condition);\n    }\n\n    return (\n        <div>\n            <div className=\"footer\">\n                <div>{todosLeft.length} item(s) left</div>\n                <div>\n                    <ButtonGroup variant=\"text\" size=\"small\" color=\"inherit\">\n                        <Button className=\"link\" color={props.filter === FILTERS.ALL ? 'primary' : 'inherit'} style={{ textTransform: 'none' }} onClick={filterTodos(FILTERS.ALL)}>All</Button>\n                        <Button className=\"link\" color={props.filter === FILTERS.ACTIVE ? 'primary' : 'inherit'} style={{ textTransform: 'none' }} onClick={filterTodos(FILTERS.ACTIVE)}>Active</Button>\n                        <Button className=\"link\" color={props.filter === FILTERS.COMPLETED ? 'primary' : 'inherit'} style={{ textTransform: 'none' }} onClick={filterTodos(FILTERS.COMPLETED)}>Completed</Button>\n                    </ButtonGroup>\n                </div>\n                <Button color='inherit' className=\"link\" style={{ textTransform: 'none' }} onClick={() => props.deleteAllCompleted()}>Clear Completed</Button>\n            </div>\n\n            <div className=\"small-footer\">\n                <div className=\"todo-info\">\n                    <div>{todosLeft.length} item(s) left</div>\n                    <Button color='inherit' className=\"link\" style={{ textTransform: 'none' }} onClick={() => props.deleteAllCompleted()}>Clear Completed</Button>\n                </div>\n                <div className=\"filter\">\n                    <ButtonGroup variant=\"text\" size=\"small\" color=\"inherit\">\n                        <Button className=\"link\" color={props.filter === FILTERS.ALL ? 'primary' : 'inherit'} style={{ textTransform: 'none' }} onClick={filterTodos(FILTERS.ALL)}>All</Button>\n                        <Button className=\"link\" color={props.filter === FILTERS.ACTIVE ? 'primary' : 'inherit'} style={{ textTransform: 'none' }} onClick={filterTodos(FILTERS.ACTIVE)}>Active</Button>\n                        <Button className=\"link\" color={props.filter === FILTERS.COMPLETED ? 'primary' : 'inherit'} style={{ textTransform: 'none' }} onClick={filterTodos(FILTERS.COMPLETED)}>Completed</Button>\n                    </ButtonGroup>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        items: state.items,\n        filter: state.filter\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        deleteAllCompleted: () => dispatch(todoActions.deleteAllCompleted()),\n        filterTodos: filter => dispatch(todoActions.setFilter(filter))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","import './Todo.css';\nimport AddTodo from './AddTodo';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\n\nfunction Todo() {\n    return (\n        <div className=\"container\">\n            <h1 className=\"header\">TODO</h1>\n            <div className=\"add-todo\"><AddTodo /></div>\n            <div className=\"list\" ><TodoList /></div>\n            <Footer />\n        </div>\n    );\n}\n\nexport default Todo;","import Todo from './components/Todo';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\" style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/images/bg-desktop-dark.jpg)`, backgroundRepeat: 'no-repeat' }}>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as constants from '../contants';\n\nlet newId = 0;\nexport default function todoReducer(state = [], action) {\n    switch (action.type) {\n        case constants.ADD_TODO:\n            const todoToAdd = {\n                id: newId++,\n                text: action.todo,\n                completed: false\n            };\n            return [...state, todoToAdd];\n        case constants.TOGGLE_TODO:\n            return state.map(todo => {\n                if (todo.id !== action.id) {\n                    return todo;\n                }\n                return {\n                    ...todo,\n                    completed: !todo.completed\n                };\n            });\n        case constants.DELETE_TODO:\n            return state.filter(todo => todo.id !== action.id);\n        case constants.DELETE_ALL_COMPLETED:\n            return state.filter(todo => !todo.completed);\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer';\nimport filterReducer from './filterReducer';\n\nconst rootReducer = combineReducers({\n   items: todoReducer,\n   filter: filterReducer\n});\n\nexport default rootReducer;","import * as constants from '../contants';\n\nexport default function filterReducer(state = constants.FILTERS.ALL, action) {\n    switch (action.type) {\n        case constants.SET_FILTER:\n            return action.filter;\n        default:\n            return state;\n    }\n}","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/configureStore\";\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}